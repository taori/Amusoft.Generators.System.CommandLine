//HintName: ClassWrappedArgument.g.cs
// <auto-generated/>
using System.CommandLine;
using System.CommandLine.Invocation;
using System.Threading.Tasks;
using Amusoft.Generators.System.CommandLine.Attributes;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace Amusoft.Generators.System.CommandLine.UnitTests.TestResources;	

public partial ClassWrappedArgument
{
	private ClassWithHandler _handler;

	private void BindHandler()
	{
		if (_handler is null)
			return;

		this.SetHandler(async (context) =>
		{
			var host = context.BindingContext.GetRequiredService<IHost>();
			_handler = new ClassWithHandler();
			var p1 = context.ParseResult.GetValueForArgument(ArgumentOne);
			var p2 = context.ParseResult.GetValueForArgument(ArgumentTwo);
			await _handler.ExecuteAsync(context, p1, p2);
		});
	}

	public partial ClassWithHandler : InvokerBase
	{
	}

	public abstract class InvokerBase
	{
		public virtual Task ExecuteAsync(InvocationContext context, int argumentOne, string argumentTwo) => Task.CompletedTask;	
	}
}