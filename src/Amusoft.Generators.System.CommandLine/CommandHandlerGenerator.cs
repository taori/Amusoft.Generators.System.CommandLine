using System.Linq;
using Amusoft.Generators.System.CommandLine.Attributes;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using NotImplementedException = System.NotImplementedException;

namespace Amusoft.Toolkit.Generators.System.CommandLine;

[Generator]
internal class CommandHandlerGenerator : ISourceGenerator
{
	public void Initialize(GeneratorInitializationContext context)
	{
	}

	public void Execute(GeneratorExecutionContext context)
	{

		foreach (var syntaxTree in context.Compilation.SyntaxTrees)
		{
			var root = syntaxTree.GetRoot(context.CancellationToken);
			foreach (var classDeclarationSyntax in root.DescendantNodes(_ => true).OfType<ClassDeclarationSyntax>())
			{
				var attributes = classDeclarationSyntax.AttributeLists.SelectMany(d => d.Attributes);
				var semanticModel = context.Compilation.GetSemanticModel(syntaxTree);
				attributes.Select(d => semanticModel.GetDeclaredSymbol(d).MetadataName == typeof(GenerateCommandHandlerAttribute).FullName);
			}
		}

		// // Find the main method
		// var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);
		// 		// Build up the source code
		// 		string source = $@"// <auto-generated/>
		// using System;
		//
		// namespace {mainMethod.ContainingNamespace.ToDisplayString()}
		// {{
		//     public partial class {mainMethod.ContainingType.Name}
		//     {{
		//         static partial void HelloFrom(string name) =>
		//             Console.WriteLine($""Generator says this: Hi from '{{name}}'"");
		//     }}
		// }}
		// ";
		// 		var typeName = mainMethod.ContainingType.Name;
		//
		// 		// Add the source code to the compilation
		// 		context.AddSource($"{typeName}.g.cs", source);
	}

	public static bool ContainsCandidate(SyntaxTree tree)
	{
		if (!tree.TryGetRoot(out var root))
			return false;

		foreach (var classDeclarationSyntax in root.DescendantNodes().OfType<ClassDeclarationSyntax>())
		{
			if (IsClassCandidate(classDeclarationSyntax))
				return true;
		}

		return false;
	}

	private static bool IsClassCandidate(ClassDeclarationSyntax classDeclarationSyntax)
	{
		return classDeclarationSyntax.AttributeLists.Count > 0;
	}
}